// Code generated by MockGen. DO NOT EDIT.
// Source: timer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBaseTimer is a mock of BaseTimer interface.
type MockBaseTimer struct {
	ctrl     *gomock.Controller
	recorder *MockBaseTimerMockRecorder
}

// MockBaseTimerMockRecorder is the mock recorder for MockBaseTimer.
type MockBaseTimerMockRecorder struct {
	mock *MockBaseTimer
}

// NewMockBaseTimer creates a new mock instance.
func NewMockBaseTimer(ctrl *gomock.Controller) *MockBaseTimer {
	mock := &MockBaseTimer{ctrl: ctrl}
	mock.recorder = &MockBaseTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseTimer) EXPECT() *MockBaseTimerMockRecorder {
	return m.recorder
}

// Blocked mocks base method.
func (m *MockBaseTimer) Blocked() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Blocked indicates an expected call of Blocked.
func (mr *MockBaseTimerMockRecorder) Blocked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blocked", reflect.TypeOf((*MockBaseTimer)(nil).Blocked))
}

// Reset mocks base method.
func (m *MockBaseTimer) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockBaseTimerMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBaseTimer)(nil).Reset))
}

// Start mocks base method.
func (m *MockBaseTimer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockBaseTimerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBaseTimer)(nil).Start))
}

// Stop mocks base method.
func (m *MockBaseTimer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockBaseTimerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBaseTimer)(nil).Stop))
}
